#!/usr/bin/python3
help_message = '''
goal: track ML experiment

It generates a unique tracking number tid, and saves all output in args.outputs_dir/tid
All the tracking information are recorded in args.outputs_dir/tid

examples:
  # run command with some message
  track [command] -m "some message"
  # log o_dir (use | less to mimic git log)
  track log 
  # log only the tid entry of the log
  track log [o_dir/tid] # will ignore "-o"
  # update message for the entry with tid
  track log [tid] -m "updated message"
  # removes tid from the log and its associated output directory
  track rm [tid]
  # removes tid from a directory
  track rm [o_dir/tid]
  # make a directory
  track mkdir [dir]
  # mv a directory elsewhere (changing its log)
  track mv [tid1] [tid2]

assumes:
  [command] to run takes "--outputs_dir outputs/tid" as argument
'''
import argparse
from argparse import RawTextHelpFormatter
import uuid
import sys
import os
import subprocess
import datetime
import torch

def get_args():
    '''
    commandline arguments for the task
    '''
    parser = argparse.ArgumentParser(description=help_message,
                                     formatter_class=RawTextHelpFormatter)
    parser.add_argument("command", nargs='+',
                        help="command to run")
    parser.add_argument("-m", "--message", default="",
                        help="meassage for this run")
    parser.add_argument("-o", "--outputs_dir", default="outputs",
                        help="where outputs are saved")
    parser.add_argument("-n", "--no_outputs_dir", action="store_true",
                        help="no outputs dir used")
    parser.add_argument("-l", "--report_level", default=1, type=int,
                        help="max report level")
    args = parser.parse_args()
    return args

def gather_log(o_dir, level=0, max_level=1):
    '''
    gather a list of records

    max_level: show how many level of logs
    level: current level
    '''
    assert level >= 0 and max_level >= 0, "only non-negtive number of levels"
    records = []
    if level == max_level: return records
    for tid in os.listdir(o_dir):
        track_log = f"{o_dir}/{tid}/track.log"
        if not os.path.exists(track_log): continue
            
        record = torch.load(track_log)
        record['children'] = gather_log(os.path.join(o_dir, tid), level+1, max_level)
        records.append(record)
    return records

def gen_report(records, level=0):
    all_report = ""
    for i, record in enumerate(sorted(records, key=lambda r: r['date'])[::-1]):
        report = f'''
        command: {record['command']}
        date:    {record['date']:%Y-%m-%d %H:%M}
        desc:    {record['desc']}
        tid:     {record['tid']}
        git:     {record['git']}
        '''
        report = '\n'.join(((" " * 8 * level) + l.strip() \
                              for l in report.split('\n')[1:]))
        if i != 0 or level != 0:
            all_report += '\n'
        all_report += report
        all_report += gen_report(record['children'], level+1)
        
    return all_report

if __name__ == "__main__":
    flags = get_args()
 
    if flags.command[0] == "rm": 
        '''
        removes the experiment and its associated output directory
        '''
        assert len(flags.command) == 2, "track rm expect a experiment id"
        tid = flags.command[1]
        o_dir = flags.outputs_dir
        if "/" in tid:
            o_dir = os.path.dirname(tid)
            tid = tid.split("/")[-1]
        rm_dir = f"{o_dir}/{tid}"
        os.system(f"rm -r {rm_dir}")
        
    elif flags.command[0] == "log":
        '''
        if given tid, will look at that particular log entry
        otherwise display outputs_dir's subdirectories' track log
        '''
        assert len(flags.command) <= 2, "track log expect <= 2 arguments"

        reports = []
        o_dir = flags.outputs_dir
        if len(flags.command) == 2:
            o_dir = os.path.dirname(flags.command[1])
            if o_dir == "": o_dir = "."
            if flags.command[1] in ['.', '..']:
                o_dir = flags.command[1]

        if len(flags.command) == 2 and \
           flags.command[1].split('/')[-1] not in ["", ".", '..']:
            # show specific tid            
            tid = flags.command[1].split('/')[-1]
            track_log = f"{o_dir}/{tid}/track.log"            
            record = torch.load(track_log)

            # update message
            if flags.message != "":
                record['desc'] = flags.message
                torch.save(record, track_log)

            record['children'] = gather_log(f"{o_dir}/{tid}",
                                            max_level=flags.report_level)
            print(gen_report([record]))
        else:
            records = gather_log(o_dir, max_level=flags.report_level)
            print(gen_report(records))

    else: # run the command        
        
        if flags.command[0] == 'mkdir':
            o_dir = flags.command[1]
            tid = o_dir
            track_log = f"{tid}/track.log"
            os.system(f"mkdir -p {tid}")
        elif flags.command[0] == 'mv':
            tid1, tid = flags.command[1], flags.command[2]
            track_log = f"{tid1}/track.log"
            record = torch.load(f"{tid1}/track.log")
            record['tid'] = tid.split("/")[-1]
            torch.save(record, track_log)
            os.system(f"mv {tid1} {tid}")
            exit(0)
        else:
            # give a unique identifier directory
            tid = uuid.uuid1().hex
            o_dir = f"{flags.outputs_dir}/{tid}"
            os.system(f"mkdir -p {o_dir}")
            track_log = f"{flags.outputs_dir}/{tid}/track.log"
            
        record = {'date': datetime.datetime.now(),
                  'git': subprocess.check_output(["git", "rev-parse",
                                                  "HEAD"]).strip().decode("utf-8"),
                  'tid': tid, # track id
                  'command': " ".join(flags.command),
                  'desc': flags.message
        }

        torch.save(record, track_log)

        if flags.command[0] not in ['mkdir', 'mv']:
            # do the actual job
            command = " ".join(flags.command + [f'--outputs_dir {o_dir}'])
            
            print(command)
            os.system(command)


    
