This is the repository for the paper "Learning Concept Credible Models for Mitigating Shortcuts", to appear in NeurIPS 2022. 

In the coming months, I'll clean up the code and documentation to make it easier for people to build on top of this work.

* logging

I log all the commands ran using 
#+BEGIN_SRC bash
track log
#+END_SRC

see how to use my command tracking
#+BEGIN_SRC bash
track -h
#+END_SRC

* CCM stands for concept credible model

It aims to

a) address issues with CBM when concept set is incomplete
b) leverage feature based attribution methods for high level features

[[credibility.ipynb][credibility.ipynb]] contains ideas to extend rationale from binary to real number

Two ideas:
1. Extend credible model to tasks with not interpretable raw features
   (eg. latent factors such as angle and others)
2. Expand interpretability to multimodality context: e.g. image to caption
   translation can be used for explanation (in some context words are better for
   explanation, in other context image may be the better medium for explanation)

* Software

  visualization code adapted from [[https://github.com/utkuozbulak/pytorch-cnn-visualizations/blob/master/src/vanilla_backprop.py][here]].
  
* Software issues

MLD4 server uses cuda 10.1 which is no longer supported by pytorch

#+BEGIN_EXAMPLE
>>> torch.tensor([1,2,3]).cuda()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jiaxuan/.local/share/virtualenvs/CredibleConceptModel-7quSdsQm/lib/python3.7/site-packages/torch/cuda/__init__.py", line 170, in _lazy_init
    torch._C._cuda_init()
RuntimeError: The NVIDIA driver on your system is too old (found version 10010). Please update your GPU driver by downloading and installing a new version from the URL: http://www.nvidia.com/Download/index.aspx Alternatively, go to: https://pytorch.org to install a PyTorch version that has been compiled with your version of the CUDA driver.
#+END_EXAMPLE

workaround: https://pytorch.org/get-started/previous-versions/

#+BEGIN_SRC bash
pipenv run pip install torch==1.7.1+cu101 torchvision==0.8.2+cu101 torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html
#+END_SRC

also note that nvidia-smi shows the driver version, not the run time version
https://stackoverflow.com/questions/40517083/multiple-cuda-versions-on-machine-nvcc-v-confusion
* mimic data

The problem with arf subset is that 
1. The confidence interval is too large (sample too small)
2. C is too strong (STD(X) not better than CBM on clean dataset so that nothing to learn)

Instead I chose a task that has a decent gap between STD(X) and CBM performance

mimic ehr data https://physionet.org/content/mimiciv/1.0/

documentation https://mimic.mit.edu/docs/iv/modules/core/patients/

total patients: 382278
number of male: 182571 (~48%)

** for efficiently compute confidence interval

first save the model
#+BEGIN_SRC bash
python mimic_scripts/save_output.py -m outputs/869ce19c4bc511ecb773ac1f6b24a434/ccm
#+END_SRC

then compute confidence interval. See [[notebooks/mimic_stats.ipynb][example notebook]].
#+BEGIN_SRC python
from lib.eval import bootstrap
bootstrap(metric, y, yhat)
#+END_SRC
